<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0064)http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2p.asp -->
<HTML><HEAD><TITLE>Special Report: Winning with Web Services</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="DevX Report on Java Web Services" name=Description><LINK 
href="Special Report Winning with Web Services_arquivos/devxstyles.css" 
type=text/css rel=STYLESHEET><LINK 
href="Special Report Winning with Web Services_arquivos/vcdjstyles.css" 
type=text/css rel=stylesheet><LINK 
href="Special Report Winning with Web Services_arquivos/javapro.css" 
type=text/css rel=stylesheet>
<STYLE>A {
	TEXT-DECORATION: none
}
BODY {
	BACKGROUND-COLOR: white
}
A:hover {
	TEXT-DECORATION: underline
}
</STYLE>

<META content="MSHTML 6.00.2800.1400" name=GENERATOR></HEAD>
<BODY link=#660000 bgColor=#ffffff leftMargin=0 topMargin=0 marginwidth="0" 
marginheight="0"><!-- Start the page layout -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top bgColor=#ff6600 colSpan=2 height=20>
      <SCRIPT language=JavaScript>
<!--

function SymError()
{
  return true;
}

window.onerror = SymError;

var SymRealWinOpen = window.open;

function SymWinOpen(url, name, attributes)
{
  return (new Object());
}

window.open = SymWinOpen;

//-->
</SCRIPT>

      <SCRIPT language=javascript 
      src="Special Report Winning with Web Services_arquivos/jsww.htm"></SCRIPT>
    </TD></TR></TBODY></TABLE><A name=top>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top>
      <TABLE align=center border=0>
        <TBODY>
        <TR>
          <TD>
            <SCRIPT language=JavaScript>
<!--
document.write('');
function OAS_AD(pos) {
if (OAS_version >= 11)
OAS_RICH(pos);
else
OAS_NORMAL(pos);
}
//-->
</SCRIPT>

            <TABLE>
              <TBODY>
              <TR>
                <TD><!------ OAS AD '120x60-1' begin ------>
                  <SCRIPT language=JavaScript>
<!--
OAS_AD('120x60-1');
//-->
</SCRIPT>
                  <NOSCRIPT></NOSCRIPT><!------ OAS AD '120x60-1' end ------></TD>
                <TD><!------ OAS AD '468x60-1' begin ------>
                  <SCRIPT language=JavaScript>
<!--
OAS_AD('468x60-1');
//-->
</SCRIPT>
                  <NOSCRIPT></NOSCRIPT><!------ OAS AD '468x60-1' end ------></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
      <TABLE width=640 border=0>
        <TBODY>
        <TR align=left>
          <TD width=10>&nbsp;</TD>
          <TD>
            <TABLE cellSpacing=0 cellPadding=3 width=150 border=0>
              <TBODY>
              <TR>
                <TD align=middle><A href="http://www.devx.com/"><IMG 
                  src="Special Report Winning with Web Services_arquivos/webserv.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD align=middle>&nbsp;</TD></TR></TBODY></TABLE><B><FONT 
            face="Helvetica Condensed, Univers Condensed, Arial" color=#660000 
            size=6>Designing a WSDL Client, Discovering Web Services 
            </FONT></B><BR><BR><A 
            href="http://www.devx.com/javaSR/articles/siddiqui2/siddiqui2-1.asp">http://www.devx.com/javaSR/articles/siddiqui2/siddiqui2-1.asp</A><BR><BR><I><B>You've 
            built your UDDI client, now find out how to use it. This article 
            explains how to build a WSDL client. Your client will download WSDL 
            files, parse them to read interface details, author service 
            invocation requests, and collect information on any Web service you 
            investigate. </B></I><BR><BR><B>by Bilal Siddiqui</B> 
        <BR></TD></TR></TBODY></TABLE>
      <TABLE border=0>
        <TBODY>
        <TR align=left>
          <TD vAlign=top align=middle>&nbsp;</TD>
          <TD vAlign=top><FONT face="Verdana, Arial,Helvetica,sans-serif" 
            size=2>In the world of Web services, a business describes its 
            services (activities or functionality) by using an XML-based 
            structure called WSDL (Web Service Description Language). 
            <P>When a service consumer wants to interact with a Web service, 
            they merely download that service's WSDL file. The file tells what 
            the service offers and how to interact with it. 
            <P>In this article, I'll design a reusable WSDL Java client that can 
            download any WSDL, parse it to read interface details, author 
            service invocation requests, and collect information coming back 
            from the WSDL service. I'll also explain WSDL's syntax, grammar, 
            namespace rules, etc. 
            <P>The interaction between the WSDL client and host service has four 
            parts:<BR>
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=right border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow1a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure3thumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow1a();"><B>Figure 
                  1.</B></A> </FONT>Here's the four step procedure for a 
                  WSDL-based Web service.</FONT><BR><BR></TD></TR></TBODY></TABLE>
            <OL>
              <LI>Downloading the WSDL file. Start with a WSDL file URL. In some 
              cases, you will know the location of the file you want, but you 
              can also get the URL from a UDDI registry (please see the article 
              <I>"<A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui1/siddiqui-1.asp" 
              target?_blank?>Constructing a UDDI Client, Calling the UDDI 
              Registry</A>"</I>). An HTTP request is passed to the target URL, 
              which returns a WSDL file. To download the WSDL file, use the 
              HTTPConnection class shown in <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing1.asp" 
              target=_blank>Listing 1</A>. 
              <LI>Processing the WSDLfile. Remember, the WDSL file is in XML, so 
              you need an XML parser to process it. As in the <A 
              href="http://archive.devx.com/javaSR/articles/siddiqui1/siddiqui-1.asp" 
              target=_blank>UDDI article</A>, you'll be using Enhydra's <A 
              href="http://kxml.enhydra.org/software/downloads/index.html" 
              target=_blank>kXML</A>. kXML's smaller footprint allows the WSDL 
              client to work inside an applet as well as Java Foundation 
              Classes/Swing containers. The WSDLClient class (<A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
              target=_blank>Listing 2</A>) processes the WSDL file. 
              <LI>Authoring the service invocation request. Based on the 
              information gathered in Step 2, the WSDL client formulates an XML 
              request. Simple Object Access Protocol (SOAP) is the most popular 
              transport facility available for sending Web service invocation 
              requests. WSDL only tells the details of services, but once they 
              are known, SOAP transports the requests as XML messages. The WSDL 
              client uses the same SOAP-related classes that developed for the 
              UDDI client in the previous article (SoapTransport.class in <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing3.asp" 
              target=_blank>Listing 3</A>, SoapCall.class in <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing4.asp" 
              target=_blank>Listing 4</A>, and HttpConnection.class in <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing1.asp" 
              target=_blank>Listing 1</A>). 
              <LI>Processing the SOAP response: A class named <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing3.asp" 
              target=_blank>SoapTransport</A> extracts the response string from 
              the SOAP envelope. </LI></OL>
            <P><A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2fig2.asp" 
            target=_blank>Figure 1</A> shows the sequence of these four events 
            broken down into sub-steps. Step 4 is purely a SOAP issue is outside 
            the scope of this article. For more on using SOAP, please refer to 
            Resources (right). 
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=right border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow2a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure4thumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow2a();"><B>Figure 
                  2.</B></A> </FONT>The arrangement of classes within the WSDL 
                  client. </FONT><BR><BR></TD></TR></TBODY></TABLE>
            <P><A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2fig2.asp" 
            target=_blank>Figure 2</A> shows the arrangement of classes within 
            the WSDL client. 
            <P>The <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing5.asp" 
            target=_blank>WSDLAppletClient class</A> is a generic applet that 
            provides a simple GUI as shown in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2fig3.asp" 
            target=_blank>Figure 3</A>. The container must interact with three 
            of our classes: 
            <OL>
              <LI>The <A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
              target=_blank>WSDLClient</A> downloads a WSDL file from the 
              specified URL, downloads it, parses it, and populates its internal 
              data structures. 
              <LI>The Operation class (<A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing6.asp" 
              target=_blank>Listing 6</A>) creates the SOAP requests based on 
              the operations described in the WSDL file. WSDL-based Web services 
              consist of Operations. Think of a Web service as a Java or C++ 
              class and Operations as its public methods. The WSDL parsing task 
              is nothing but creating Operation objects. 
              <LI>The Parameter class (<A 
              href="http://archive.devx.com/javasr/articles/siddiqui2/listing7.asp" 
              tagret="_blank">Listing 7</A>) builds and retrieves individual 
              parameters (values) from the SOAP messages passed between the WSDL 
              client and the Web service for each operation. Information about 
              what parameters are required for a particular operation comes from 
              the WSDL file. While parsing the WSDL file to create Operation 
              objects, you also create the necessary Parameter objects for each 
              operation. </LI></OL>
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=left border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow3a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure6athumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow3a();"><B>Figure 
                  3.</B></A> </FONT>This is an applet-based GUI to test the WSDL 
                  client. </FONT><BR><BR></TD></TR></TBODY></TABLE><B>Downloading the 
            WSDL File</B><BR>The HTTPConnection class makes an HTTP request to 
            the URL, where the WSDL file is located. The <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
            target=_blank>WSDLClient</A> class is the main processing client; it 
            downloads the WSDL file, processes it, and populates the operation 
            and message class objects. The GetOperations() method of the <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
            target=_blank>WSDLClient</A> class returns a Vector of 
            operation-type objects, allowing the container application to invoke 
            an individual operation. 
            <P><B>Processing the WSDL File</B><BR>The WSDL file contains service 
            information in the &lt;service&gt; element. <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A> shows a sample WSDL file with one 
            &lt;service&gt; element containing the following children:<BR>
            <UL>
              <LI>The &lt;description&gt; element contains the description of 
              the service in simple English. 
              <LI>The &lt;port&gt; element serves as one end of the 
              communication channel. Its remote end sits on the other side of 
              the Internet listening to your requests. It contains a "binding" 
              attribute, whose value (TemperatureBinding) refers to the "name" 
              attribute of a &lt;binding&gt; element. The &lt;port&gt; element 
              also contains a &lt;SOAP:address&gt; element (readers familiar 
              with XML namespaces will understand that soap:address means the 
              &lt;address&gt; element belongs to the SOAP namespace and is not 
              part of WSDL schema). This &lt;SOAP:address&gt; element specifies 
              the location of a SOAP server in the form of a URL. </LI></UL>
            <P><A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A> also contains the following elements: a 
            &lt;binding&gt; element and a &lt;portType&gt; element. The 
            &lt;binding&gt; specifies the details of the SOAP binding. The 
            &lt;portType&gt; element describes details of the WSDL interface. 
            The &lt;portType&gt; element contains one operation named "getTemp." 
            Because these two elements are separate, you can design WSDL 
            interfaces independent of their SOAP deployments. 
            <P>
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=right border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow4a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure6bthumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow4a();"><B>Figure 
                  4.</B></A> </FONT>: Here the user has downloaded a WSDL file 
                  containing a setMessage method. This required one parameter 
                  type string. </FONT><BR><BR></TD></TR></TBODY></TABLE>The 
            &lt;port&gt;, &lt;binding&gt;, and &lt;portType&gt; elements are a 
            set, but there may often be more than one. <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing9.asp" 
            target=_blank>Listing 9</A> shows another WSDL file that contains a 
            set of these elements. 
            <P>The client's job is to jump from a &lt;port&gt; element to the 
            matching (they have the same value in their name attributes) 
            &lt;binding&gt; element. The &lt;binding&gt; element furnishes the 
            information needed for the next step. 
            <P>The WSDLClient in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
            target=_blank>Listing 2</A> takes either of the following types of 
            WSDL file URLs:<BR>
            <UL>
              <LI>http://www.mywebservice.com/mywsdl.wsdl: This is simply a WSDL 
              URL. In this case, read the &lt;service&gt; element and its 
              &lt;port&gt; child, and jump to the matching &lt;binding&gt;. If 
              there is no &lt;service&gt; element, jump to the first instance of 
              a &lt;binding&gt; element. 
              <LI>http://www. 
              mywebservice.com/mywsdl.wsdl#mybindingfragmentname: This URL 
              contains a fragment identifier, which is the "name" attribute of 
              the &lt;binding&gt; element. Because you don't need to read the 
              &lt;service&gt; element to get the &lt;binding&gt; element name, 
              you can jump directly to the desired &lt;binding&gt;. </LI></UL>
            <P>Whatever path you take, you have to reach a &lt;binding&gt; 
            element. The &lt;binding&gt; element has an attribute type 
            specifying the matching &lt;portType&gt; element name. <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A> contains only one &lt;portType&gt; 
            element, whose name attribute has value "TemperaturePortType." This 
            matches the type attribute of the &lt;binding&gt; element. 
            <P>PortType is the WSDL interface and each operation is a method in 
            that interface. The &lt;portType&gt; element in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A> contains one &lt;operation&gt; element 
            named "getTemp". 
            <P><B>Get the &lt;Message&gt; Element</B><BR>Each of the WSDL 
            methods has input parameters and return values. So the 
            &lt;operation&gt; contains &lt;input&gt; and &lt;output&gt; tags. 
            &lt;input&gt; tags represent input parameters and &lt;output&gt; 
            tags represent return values. <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A> contains one each of these elements. 
            Notice that both types of element tag have "message" attributes. 
            <P>The value of the "message" attribute of the &lt;input&gt; element 
            is "getTempRequest." Look for a &lt;message&gt; element with the 
            same "name" attribute value somewhere in the WSDL file. In <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing8.asp" 
            target=_blank>Listing 8</A>, the message element with the name 
            attribute value "getTempRequest" lies close to the beginning of the 
            file. But it can be present anywhere in the WSDL file as an 
            immediate child of &lt;definitions&gt; root element. The 
            &lt;message&gt; element is meant to describe the data type of 
            &lt;input&gt; element. 
            <P>Similarly, there is a &lt;message&gt; element whose name 
            attribute value matches the message attribute of &lt;output&gt; 
            element. These message attribute values of &lt;input&gt; and 
            &lt;output&gt; elements are actually referring to &lt;message&gt; 
            elements. Each &lt;message&gt; element will have one or more 
            &lt;part&gt; elements. Each part has name and type attributes. Think 
            of each &lt;part&gt; as variable declarations in Java. Together, 
            these &lt;part&gt; elements can be used to specify user-defined data 
            types for messages. 
            <P>Why match the name attribute value of &lt;message&gt; element 
            with the message attribute value of &lt;input&gt; and &lt;output&gt; 
            elements? Because &lt;input&gt; and &lt;output&gt; elements use 
            their corresponding &lt;message&gt; elements to define what data 
            types will actually travel over the Internet via SOAP. The 
            &lt;message&gt; elements define the data types for the messages. 
            Without finding the matching &lt;message&gt; element, you will not 
            know what data types the Web service is expecting from you and what 
            you can expect from the Web service in return. 
            <P>WSDL uses messages to send "parameters" and "operation" (method) 
            calls. Any number of messages and return (output) messages can be 
            sent with a method invocation call. 
            <P>
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=left border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow5a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure6cthumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow5a();"><B>Figure 
                  5.</B></A> </FONT>The response from the WSDL 
                  implementation/SOAP server.</FONT><BR><BR></TD></TR></TBODY></TABLE>
            <P><B>WSDL Parsing Strategy</B><BR>The parsing should go something 
            like this:<BR>
            <UL>
              <LI>Find the &lt;service&gt; element and get the &lt;binding&gt;, 
              &lt;portType&gt; element names as well as the SOAP server address. 

              <LI>Jump to the &lt;binding&gt; element by matching the binding 
              name that was found in the &lt;service&gt; element, and get the 
              SOAP action attribute value. 
              <LI>Find the &lt;operation&gt; element within the &lt;binding&gt; 
              element and get its name, encoding style, and namespace values. 
              <LI>Jump to the &lt;portType&gt; element, by matching the portType 
              name found in the &lt;service&gt; element, and get the 
              &lt;operation&gt; element by matching the operation name found in 
              &lt;binding&gt;. 
              <LI>Get the &lt;operation&gt; element's child &lt;input&gt; 
              element and the "message" attribute value. 
              <LI>Jump to the &lt;message&gt; element by matching the name found 
              in the &lt;input&gt; element. 
              <LI>Get the &lt;part&gt; elements found in the &lt;message&gt; 
              element and retrieve the name and "type" attribute values from 
              each &lt;part&gt;. 
              <LI>Repeat steps 5 to 7 for the &lt;output&gt; child element. 
              <LI>Repeat steps 3 to 7 for each &lt;operation&gt; element found 
              in &lt;binding&gt;. </LI></UL>
            <P>Parsing involves the use of Enhydra's <A 
            href="http://kxml.enhydra.org/software/downloads/index.html" 
            target=_blank>kXML</A> (refer to the parse() method in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing2.asp" 
            target=_blank>Listing 2</A>). The complete WSDL file passes to a 
            reader object, which then passes to an XMLParser object. The next 
            step is to create a document object through this object. Calling the 
            parse() method of the document loads the complete WSDL structure in 
            DOM. Next, parse through the WSDL tags to construct the required 
            operation and parameter objects. 
            <P><B>Authoring the Service Invocation Request</B><BR>After parsing 
            the complete WSDL file, load it into a WSDLClient object. As shown 
            in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2fig4.asp" 
            target=_blank>Figure 4</A>, each &lt;operation&gt; becomes an object 
            of the <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing6.asp" 
            target=_blank>Operation</A> class and each &lt;message&gt; element 
            becomes an object of the <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing7.asp" 
            target=_blank>Parameter</A> class. The <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing6.asp" 
            target=_blank>Operation</A> class is also capable of coordinating 
            with SOAP and HTTP classes to send method invocation calls. 
            <P>
            <TABLE cellSpacing=2 cellPadding=2 width=175 align=right border=0>
              <TBODY>
              <TR>
                <TD width=20 rowSpan=2>&nbsp;</TD>
                <TD><A href="javascript:openWindow6a();"><IMG alt="" 
                  src="Special Report Winning with Web Services_arquivos/figure5thumb.gif" 
                  border=0></A></TD></TR>
              <TR>
                <TD class=figtab><FONT face=Arial size=2><FONT 
                  color=#ff0000><A href="javascript:openWindow6a();"><B>Figure 
                  6.</B></A> </FONT>One object of the WSDLClient holds several 
                  Operation objects. Each Operation object holds input and 
                  output Parameter objects.</FONT><BR><BR></TD></TR></TBODY></TABLE>
            <P>Take a look at the following three methods of the Operation 
            class:<BR>
            <UL>
              <LI>SetValue() 
              <LI>Send() 
              <LI>GetBody() </LI></UL>
            <P>These three methods provide an easy way of authoring SOAP service 
            invocation requests for any Operation object. Once the WSDL files 
            are parsed and their data structures (which are essentially 
            Operation objects that contain Parameter objects) are loaded, call 
            the setValue() method of the Operation class to provide parameter 
            values. To send the SOAP method invocation request, call the send() 
            method of the Operation class. Internally, the Send() method uses 
            the getBody() method to author the SOAP Body. It then sends the 
            request, waits for the SOAP response, and returns it when received. 
            There's no need to worry about SOAP request authoring because the 
            WSDL client hides SOAP-related functionality from its users. 
            <P><B>Using the Applet Container</B><BR><A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/listing5.asp" 
            target=_blank>Listing 5</A> is an applet-based container for the 
            WSDL client. It represents the GUI shown in <A 
            href="http://archive.devx.com/javasr/articles/siddiqui2/siddiqui2fig3.asp" 
            target=_blank>Figure 3</A>. 
            <P>To test this applet:<BR>
            <OL>
              <LI>Type the URL of the WSDL file in the text box labeled "Enter 
              WSDL file URL". For example type 
              http://www.mywebservice.com/mywsdl.wsdl. 
              <LI>Type the SOAP server address in text box labeled "Enter SOAP 
              server URL". For example type http://www.mywebservice.com/soap. 
              This information may also be contained within the WSDL file 
              (within the SOAP:address element). In that case, entering the full 
              URL is optional. 
              <LI>Press the "Download WSDL" button. This populates the method 
              list with service method names. 
              <LI>Select a method from the methods list for making a call. The 
              parameters required are shown in the parameter window. 
              <LI>Enter the parameter values in the parameter window. 
              <LI>Press the "Invoke Method" button. This executes the call. The 
              server response of your call is shown in the output window. 
            </LI></OL>
            <P><I><B>Bilal Siddiqui</B> is an Electronics Engineer, an XML 
            consultant, and the co-founder of WaxSys, a company focused on 
            simplifying e-Business. He is a technology evangelist and 
            frequently-published technical author. You can contact Bilal at <A 
            href="mailto:bsiddiqui@waxsys.com">bsiddiqui@waxsys.com</A>.</I> 
            <BR><BR></FONT></P></TD></TR></TBODY></TABLE>
      <TABLE align=center border=0>
        <TBODY>
        <TR>
          <TD>
            <TABLE cellSpacing=0 cellPadding=3 width=400 align=center 
            bgColor=#ffffff border=0>
              <TBODY>
              <TR>
                <TD bgColor=#ffffff><FONT face=Arial color=#000099 
                  size=2><B>Sponsored Links </B></FONT></TD></TR>
              <TR>
                <TD><FONT face=Arial size=2>
                  <TABLE cellSpacing=0 cellPadding=4 border=0>
                    <TBODY>
                    <TR bgColor=#d9d9d9>
                      <TD><FONT face=Arial size=2><!-- ---- OAS AD 'fl1' begin ---- -->
                        <SCRIPT language=JavaScript>
<!--
OAS_AD('fl1');
//-->
</SCRIPT>
                        <NOSCRIPT></NOSCRIPT><!-- ---- OAS AD '120x60-1' end ---- --><!-- /AdSpace --></FONT></TD></TR>
                    <TR>
                      <TD><FONT face=Arial size=2><!-- ---- OAS AD 'fl2' begin ---- -->
                        <SCRIPT language=JavaScript>
<!--
OAS_AD('fl2');
//-->
</SCRIPT>
                        <NOSCRIPT></NOSCRIPT><!-- ---- OAS AD '120x60-1' end ---- --></FONT></TD></TR>
                    <TR bgColor=#d9d9d9>
                      <TD><FONT face=Arial size=2><!-- ---- OAS AD 'fl3' begin ---- -->
                        <SCRIPT language=JavaScript>
<!--
OAS_AD('fl3');
//-->
</SCRIPT>
                        <NOSCRIPT></NOSCRIPT><!-- ---- OAS AD '120x60-1' end ---- --></FONT></TD></TR>
                    <TR>
                      <TD><FONT face=Arial size=2><!-- ---- OAS AD 'fl4' begin ---- -->
                        <SCRIPT language=JavaScript>
<!--
OAS_AD('fl4');
//-->
</SCRIPT>
                        <NOSCRIPT></NOSCRIPT><!-- ---- OAS AD '120x60-1' end ---- --></FONT></TD></TR>
                    <TR bgColor=#d9d9d9>
                      <TD><FONT face=Arial size=2><!-- ---- OAS AD 'fl5' begin ---- -->
                        <SCRIPT language=JavaScript>
<!--
OAS_AD('fl5');
//-->
</SCRIPT>
                        <NOSCRIPT></NOSCRIPT><!-- ---- OAS AD '120x60-1' end ---- --></FONT></TD></TR></TBODY></TABLE></FONT></TD></TR></TBODY></TABLE><BR><!--NO MORE BOTTOM 468 AD--></TD></TR></TBODY></TABLE><BR><BR><BR>
      <HR>
      <BR><BR>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=orange align=middle><A class=basiclink 
            href="http://www.devx.com/DevX/LegacyLink/9634?trk=Foot%5FCL%5FAdinfo">Advertising&nbsp;Info</A>&nbsp;&nbsp;|&nbsp;&nbsp; 
            <A class=basiclink 
            href="http://www.devx.com/premier/Door/17532?trk=Foot%5FCL%5FPC">Member&nbsp;Services</A>&nbsp;&nbsp;|&nbsp;&nbsp; 
            <A class=basiclink 
            href="http://www.devx.com/DevX/LegacyLink/8487?trk=Foot%5FCL%5FContact">Contact&nbsp;Us</A>&nbsp;&nbsp;|&nbsp;&nbsp; 
            <A class=basiclink 
            href="http://www.devx.com/DevX/LegacyLink/8151?trk=Foot%5FCL%5FHelp">Help</A>&nbsp;&nbsp;|&nbsp;&nbsp; 
            <A class=basiclink 
            href="http://www.devx.com/DevX/LegacyLink/8167?trk=Foot%5FCL%5FFeedback">Feedback</A>&nbsp;&nbsp;|&nbsp;&nbsp; 
            <A class=basiclink 
            href="http://www.devx.com/SiteMap/Door/15965">Site&nbsp;Map</A> 
        </TD></TR></TBODY></TABLE>
      <DIV></DIV>
      <DIV style="MARGIN-TOP: 20px">
      <TABLE cellSpacing=0 cellPadding=0 align=center border=0>
        <TBODY>
        <TR>
          <TD align=middle><FONT class="">
            <FORM action=http://search.internet.com/query method=post><INPUT 
            type=hidden value=1 name=IC_Summary> <FONT 
            face="verdana, arial, helvetica" size=-2><B>Jupiterweb 
            networks</B></FONT> 
            <P><A href="http://www.internet.com/"><IMG height=15 
            alt=internet.com hspace=0 
            src="Special Report Winning with Web Services_arquivos/8400.gif" 
            width=97 align=absMiddle border=0></A><IMG height=25 alt="" 
            hspace=10 
            src="Special Report Winning with Web Services_arquivos/8417.gif" 
            width=1 align=absMiddle border=0><A 
            href="http://www.earthweb.com/"><IMG height=12 alt=earthweb.com 
            hspace=5 
            src="Special Report Winning with Web Services_arquivos/8401.gif" 
            width=93 align=absMiddle border=0></A><IMG height=25 alt="" 
            hspace=10 
            src="Special Report Winning with Web Services_arquivos/8417.gif" 
            width=1 align=absMiddle border=0><A href="http://www.devx.com/"><IMG 
            height=30 alt=Devx.com hspace=0 
            src="Special Report Winning with Web Services_arquivos/8402.gif" 
            width=35 align=absMiddle border=0></A><IMG height=25 alt="" 
            hspace=10 
            src="Special Report Winning with Web Services_arquivos/8417.gif" 
            width=1 align=absMiddle border=0><A 
            href="http://www.clickz.com/"><IMG height=24 alt=ClickZ hspace=0 
            src="Special Report Winning with Web Services_arquivos/8403.gif" 
            width=55 align=absMiddle border=0></A> 
            <P><FONT face="verdana, arial, helvetica" size=-2><B>Search 
            Jupiterweb:</B> <INPUT type=hidden value=1 name=IC_Summary> <INPUT 
            type=hidden value=0 name=IC_StartNumber> <INPUT type=hidden value=10 
            name=IC_BatchSize> <INPUT type=hidden value=50 
            name=IC_RelevanceThreshold> <INPUT type=hidden value=all 
            name=IC_QueryDatabase> <INPUT size=50 name=IC_QueryText> <INPUT 
            type=image height=20 width=41 
            src="Special Report Winning with Web Services_arquivos/8416.gif" 
            align=absMiddle value=Find border=0 name=SUBMIT> </FORM></FONT>
            <P><FONT face="verdana, arial, helvetica" size=-2>Jupitermedia 
            Corporation has four divisions: <BR><A 
            href="http://www.jupiterweb.com/" target=_Blank>JupiterWeb</A>, <A 
            href="http://www.jupiterresearch.com/" 
            target=_Blank>JupiterResearch</A>, <A 
            href="http://www.jupiterevents.com/" 
            target=_Blank>JupiterEvents</A>, and <A 
            href="http://www.jupiterimages.com/" target=_Blank>JupiterImages</A> 

            <P><SPAN class=foot>Copyright <!--YEAR-->2004 Jupitermedia 
            Corporation All Rights Reserved.<BR><A class=foot 
            href="http://www.internet.com/corporate/legal.html" 
            target=_Blank>Legal Notices</A>, <A class=foot 
            href="http://www.internet.com/corporate/reprints.html#Licensing1" 
            target=_Blank>Licensing</A>, <A class=foot 
            href="http://www.internet.com/corporate/reprints.html#Reprints1" 
            target=_Blank>Reprints</A>, &amp; <A class=foot 
            href="http://www.internet.com/corporate/reprints.html#Permissions" 
            target=_Blank>Permissions</A>, <A class=foot 
            href="http://www.internet.com/corporate/privacy/privacypolicy.html" 
            target=_Blank>Privacy Policy</A>. </FONT>
            <P><FONT face="verdana, arial, helvetica" size=-2><A class=foot 
            href="http://www.internet.com/corporate/" target=_Blank>Jupitermedia 
            Corporate Info</A> | <A class=foot 
            href="http://e-newsletters.internet.com/" 
            target=_Blank>Newsletters</A> | <A class=foot 
            href="http://jobs.internet.com/" target=_Blank>Tech Jobs</A> | <A 
            class=foot 
            href="http://e-newsletters.internet.com/mailinglists.html" 
            target=_Blank>E-mail 
        Offers</A></SPAN></FONT></P></FORM></FONT></TD></TR></TBODY></TABLE><BR>
      <SCRIPT language=JavaScript>
<!--
var SymRealOnLoad;
var SymRealOnUnload;

function SymOnUnload()
{
  window.open = SymWinOpen;
  if(SymRealOnUnload != null)
     SymRealOnUnload();
}

function SymOnLoad()
{
  if(SymRealOnLoad != null)
     SymRealOnLoad();
  window.open = SymRealWinOpen;
  SymRealOnUnload = window.onunload;
  window.onunload = SymOnUnload;
}

SymRealOnLoad = window.onload;
window.onload = SymOnLoad;

//-->
</SCRIPT>
      </DIV></TR></TBODY></TABLE></A></BODY></HTML>
