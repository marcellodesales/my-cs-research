/*
 * Created on 13/06/2004 00:41:30
 * Center of Informatics (CIn)-UFPE
 * Software Test Program
 * CIn / UFPE / Brazil
 * */
 
package br.ufpe.cin.stp.ptfaddon.model.log;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import br.ufpe.cin.stp.global.DateUtils;
import br.ufpe.cin.stp.global.excelgeneration.Cell;
import br.ufpe.cin.stp.global.excelgeneration.CellFactory;
import br.ufpe.cin.stp.global.excelgeneration.Coordinate;
import br.ufpe.cin.stp.global.excelgeneration.ExcelCreator;

/**
 * Creates the report in XLS file from a TXT log generated by PTF.
 * @author Marcello Alves de Sales Junior <BR>
 * email: masj2@cin.ufpe.br <BR>
 * 13/06/2004 
 */
public class XLSReport {
	
	/**
	 * <code>wb</code> is the work book that represents the whole XLS file
	 * @see HSSFWorkbook.
	 */
	private HSSFWorkbook wb;	
	/**
	 * <code>xlsFileNamePath</code> is the relative file name path to be used. 
	 */
	private String xlsFileNamePath;	
	/**
	 * <code>xlsCreator</code> is the XLS creator to save the file on a given path specified by fileNamePath.
	 */
	private ExcelCreator xlsCreator;
	/**
	 * <code>sheet</code> is the main sheet to be used on hte workbook.
	 */
	private HSSFSheet sheet;
	/**
	 * <code>tcs</code> is the Test cases with all results.
	 */
	private TestCaseSuite tcs;

	/**
	 * Constructs a report without any results from a log file
	 * @param fileNamePath
	 * @throws FileNotFoundException
	 */
	public XLSReport(String fileNamePath) throws FileNotFoundException{
		this.initAll(fileNamePath);
	}
	
	/**
	 * Initializes the WorkBook, The Excel Creator and Sheets
	 * (13/06/2004 12:57:16)
	 * @param xlsFileNamePath is the relative path to the xls file.
	 * @throws FileNotFoundException
	 */
	private void initAll(String xlsFileNamePath) throws FileNotFoundException{
		this.xlsFileNamePath = xlsFileNamePath;
		this.wb = new HSSFWorkbook();
		this.xlsCreator = new ExcelCreator(xlsFileNamePath,this.wb);
		this.sheet = this.xlsCreator.createSheet("PTF ADD-on Results");
		this.initializeReportBody();			
	}
	
	/**
	 * Creates a new XLSReport with the results from a LogParser class.
	 * @param xlsFileNamePath The relative file name to save the report.
	 * @param testCaseSuit is the test case collection.
	 * @throws FileNotFoundException If the relative fileNamePath parameter 
	 * indicates a path that doesn't point to an existing file.
	 */
	public XLSReport(String xlsFileNamePath, TestCaseSuite testCaseSuit) throws FileNotFoundException{
		this.initAll(xlsFileNamePath);
		this.tcs = testCaseSuit;
		this.populateResults();
	}	
	
	/**
	 * @return Gets the last instruction that's incomplete in the log file.
	 * 17/06/2004 22:12:45
	 */
	public TestCaseInstruction getIncompletTestCaseInstruction(){
		return this.tcs.getLastIncompleteTestCase();
	}
	
	/**
	 * @return If the log is incomplete, that is, if the last 
	 * TestCaseInstruction on the tsc does not have an end instruction. 
	 * 17/06/2004 22:13:22
	 */
	public boolean logWasIncomplete(){
		return (this.tcs.getLastIncompleteTestCase() != null);
	}
	
	/**
	 * Get the results from a log file and populate the xls file 
	 * with the results.
	 */
	private void populateResults(){
		this.populateNumberResults();
		this.populateTestCaseResults();
		this.populateTitleResults();
	}
	
	/**
	 * Populates the title results.
	 * 13/06/2004 14:11:38
	 */
	private void populateTitleResults(){
		int col = 1;
		int row = 0;
		
		Cell hardwareCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		hardwareCell.setCoordinates(new Coordinate(col,++row));
		hardwareCell.setValue(this.tcs.getHardware());		
		this.xlsCreator.createCell(this.sheet,hardwareCell);
		
		Cell dateCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		dateCell.setCoordinates(new Coordinate(col,++row));
		dateCell.setValue(DateUtils.getFormated(this.tcs.getDate(),"dd/MM/yyyy"));		
		this.xlsCreator.createCell(this.sheet,dateCell);
		
		Cell totalnumberCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		totalnumberCell.setCoordinates(new Coordinate(col,++row));
		totalnumberCell.setValue(String.valueOf(this.tcs.size()));		
		this.xlsCreator.createCell(this.sheet,totalnumberCell);
		
		Cell timtotalCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		timtotalCell.setCoordinates(new Coordinate(col,++row));
		timtotalCell.setValue(this.tcs.getElapsedTime());		
		this.xlsCreator.createCell(this.sheet,timtotalCell);		
	}
	
	/**
	 * Populate the final test case result lines.
	 * 13/06/2004 14:11:16
	 */
	private void populateTestCaseResults(){
		List testcases = this.tcs.getTestCases();
		byte result = 0;
		Iterator iter = testcases.iterator();
		
		int row = 6;
		
		while (iter.hasNext()) {
			TestCaseInstruction tci = (TestCaseInstruction)iter.next();				
			if (tci.getResult().equals(TestCaseSuite.RESULT_PASSED))
				result = Cell.CELL_RESULT_PASSED;
			else 
			if (tci.getResult().equals(TestCaseSuite.RESULT_FAILED))
				result = Cell.CELL_RESULT_FAILED;
			else 
			if (tci.getResult().equals(TestCaseSuite.RESULT_NOTCONFIGURED))
				result = Cell.CELL_RESULT_NOTCONF;
			else 
			if (tci.getResult().equals(TestCaseSuite.RESULT_UNKNOWN))
				result = Cell.CELL_RESULT_UNKNOWN;
				
			this.populateResultRow(tci,result,++row);
		}		
	}
	
	/**
	 * Populate a single row of result.
	 * @param tci The test case instruction used to populate the row.
	 * @param row The row to write the test.
	 * 13/06/2004 13:43:01
	 */
	private void populateResultRow(TestCaseInstruction tci, byte result, int row){
		int column = -1;
		
		Cell testCase = CellFactory.getInstance().createCell(result,this.wb);
		testCase.setCoordinates(new Coordinate(++column,row));
		testCase.setValue(tci.getTestCaseID());		
		this.xlsCreator.createCell(this.sheet,testCase);
		
		Cell started = CellFactory.getInstance().createCell(result,this.wb);
		started.setCoordinates(new Coordinate(++column,row));
		started.setValue(tci.getStartInstruction().getFormatedTime());		
		this.xlsCreator.createCell(this.sheet,started);
		
		Cell ended = CellFactory.getInstance().createCell(result,this.wb);
		ended.setCoordinates(new Coordinate(++column,row));
		ended.setValue(tci.getEndInstruction().getFormatedTime());		
		this.xlsCreator.createCell(this.sheet,ended);
		
		Cell totalCell = CellFactory.getInstance().createCell(result,this.wb);
		totalCell.setCoordinates(new Coordinate(++column,row));
		totalCell.setValue(tci.getElapsedTime());		
		this.xlsCreator.createCell(this.sheet,totalCell);	
		
		Cell fresult = CellFactory.getInstance().createCell(result,this.wb);
		fresult.setCoordinates(new Coordinate(++column,row));
		fresult.setValue(tci.getResult());		
		this.xlsCreator.createCell(this.sheet,fresult);			
	}
	
	/**
	 * Populate the final numbers of the result.
	 * 13/06/2004 14:08:28
	 */
	private void populateNumberResults(){
		int row = 0;
		int col = 4;
		
		Cell passed = CellFactory.getInstance().createCell(Cell.CELL_RESULT_PASSED,this.wb);
		passed.setCoordinates(new Coordinate(col,++row));
		passed.setValue(String.valueOf(this.tcs.getPassed()));		
		this.xlsCreator.createCell(this.sheet,passed);
		
		Cell failed = CellFactory.getInstance().createCell(Cell.CELL_RESULT_FAILED,this.wb);
		failed.setCoordinates(new Coordinate(col,++row));
		failed.setValue(String.valueOf(this.tcs.getFailed()));		
		this.xlsCreator.createCell(this.sheet,failed);
		
		Cell notconf = CellFactory.getInstance().createCell(Cell.CELL_RESULT_NOTCONF,this.wb);
		notconf.setCoordinates(new Coordinate(col,++row));
		notconf.setValue(String.valueOf(this.tcs.getNotConf()));		
		this.xlsCreator.createCell(this.sheet,notconf);		
		
		Cell unknown = CellFactory.getInstance().createCell(Cell.CELL_RESULT_UNKNOWN,this.wb);
		unknown.setCoordinates(new Coordinate(col,++row));
		unknown.setValue(String.valueOf(this.tcs.getUnknown()));		
		this.xlsCreator.createCell(this.sheet,unknown);					
	}
	
	/**
	 * Save the file in the file system
	 * @throws FileNotFoundException
	 * @throws IOException
	 * 13/06/2004 13:01:19
	 */
	public void save() throws FileNotFoundException, IOException{
		this.xlsCreator.saveFile();
	}

	/**
	 * Constructs the body of the report.
	 * 13/06/2004 13:00:48
	 */
	private void initializeReportBody(){
		this.createTitleReport();
		this.createFinalNumbers();
		this.createTestCaseResults();
	}

	/**
	 * Creates the title of the report with the main results.
	 * @param sheet
	 * 13/06/2004 01:14:31
	 */
	private void createTitleReport(){
		//sheet.setColumnWidth((short)0,(short)500);
		int col = 0;
		int row = 0;		
		
		Cell hardwareCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		hardwareCell.setCoordinates(new Coordinate(col,++row));
		hardwareCell.setValue("Hardware");		
		this.xlsCreator.createCell(this.sheet,hardwareCell);
		
		Cell dateCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		dateCell.setCoordinates(new Coordinate(col,++row));
		dateCell.setValue("Date");		
		this.xlsCreator.createCell(this.sheet,dateCell);
		
		Cell totalnumberCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		totalnumberCell.setCoordinates(new Coordinate(col,++row));
		totalnumberCell.setValue("Number of Tests");		
		this.xlsCreator.createCell(this.sheet,totalnumberCell);
		
		Cell timtotalCell = CellFactory.getInstance().createCell(Cell.CELL_TITLE_REPORT,this.wb);
		timtotalCell.setCoordinates(new Coordinate(col,++row));
		timtotalCell.setValue("Elapsed Time");		
		this.xlsCreator.createCell(this.sheet,timtotalCell);
	}
	
	/**
	 * Creates the test case result body.
	 * 13/06/2004 14:12:08
	 */
	private void createTestCaseResults(){
		int col = -1;
		int row = 6;		
		Cell testCase = CellFactory.getInstance().createCell(Cell.CELL_RESULT_HEADER,this.wb);
		testCase.setCoordinates(new Coordinate(++col,row));
		testCase.setValue("Test Case");		
		this.xlsCreator.createCell(this.sheet,testCase);
		
		Cell started = CellFactory.getInstance().createCell(Cell.CELL_RESULT_HEADER,this.wb);
		started.setCoordinates(new Coordinate(++col,row));
		started.setValue("Started");		
		this.xlsCreator.createCell(this.sheet,started);
		
		Cell ended = CellFactory.getInstance().createCell(Cell.CELL_RESULT_HEADER,this.wb);
		ended.setCoordinates(new Coordinate(++col,row));
		ended.setValue("Finished");		
		this.xlsCreator.createCell(this.sheet,ended);
		
		Cell totalCell = CellFactory.getInstance().createCell(Cell.CELL_RESULT_HEADER,this.wb);
		totalCell.setCoordinates(new Coordinate(++col,row));
		totalCell.setValue("Total");		
		this.xlsCreator.createCell(this.sheet,totalCell);	
		
		Cell result = CellFactory.getInstance().createCell(Cell.CELL_RESULT_HEADER,this.wb);
		result.setCoordinates(new Coordinate(++col,row));
		result.setValue("Result");		
		this.xlsCreator.createCell(this.sheet,result);			
	}
	
	/**
	 * Creates the final result numbers body.
	 * 13/06/2004 14:12:25
	 */
	private void createFinalNumbers(){
		int col = 3;
		int row = 0;
		Cell passed = CellFactory.getInstance().createCell(Cell.CELL_RESULT_PASSED,this.wb);
		passed.setCoordinates(new Coordinate(col,++row));
		passed.setValue("PASSED");		
		this.xlsCreator.createCell(this.sheet,passed);
		
		Cell failed = CellFactory.getInstance().createCell(Cell.CELL_RESULT_FAILED,this.wb);
		failed.setCoordinates(new Coordinate(col,++row));
		failed.setValue("FAILED");		
		this.xlsCreator.createCell(this.sheet,failed);
		
		Cell notconf = CellFactory.getInstance().createCell(Cell.CELL_RESULT_NOTCONF,this.wb);
		notconf.setCoordinates(new Coordinate(col,++row));
		notconf.setValue("NOT CONFIGURED");		
		this.xlsCreator.createCell(this.sheet,notconf);	
		
		Cell unknown = CellFactory.getInstance().createCell(Cell.CELL_RESULT_UNKNOWN,this.wb);
		unknown.setCoordinates(new Coordinate(col,++row));
		unknown.setValue("UNKNOWN");		
		this.xlsCreator.createCell(this.sheet,unknown);
	}
	
	public static void main(String[] args) {
		try {
			//LogParser log = new LogParser("C:/desenv/log/ptf_log_TRIPLETS_G_0B.09.45R - ERROR.txt");			
			
			//new XLSReport("C:/ptf_log-without errors.xls",log.getTestCases()).save();
			System.out.println("generated!!!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
