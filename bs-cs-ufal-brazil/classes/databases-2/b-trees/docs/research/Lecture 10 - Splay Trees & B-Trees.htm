<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0063)http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html -->
<!--This file created 19:00  10/05/00 by Claris Home Page version 2.0--><HTML><HEAD><TITLE>Lecture 10 - Splay Trees & B-Trees</TITLE>
<META content="MSHTML 6.00.2600.0" name=GENERATOR>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="INT2008 - Lecture 10 - Splay Trees &amp; B-Trees" name=subject>
<META content="INT2008, Data Structures and Algorithms" name=keywords>
<META content=text/css>
<STYLE>BODY {
	COLOR: black; FONT-FAMILY: arial,helvetica,geneva,sans
}
H1 {
	FONT-FAMILY: arial,helvetica,geneva,sans; size: "+3"; style: bold
}
H2 {
	FONT-FAMILY: arial,helvetica,geneva,sans; size: "+2"; style: bold
}
H3 {
	FONT-FAMILY: arial,helvetica,geneva,sans; size: "+1"; style: bold
}
H4 {
	FONT-FAMILY: arial,helvetica,geneva,sans; size: "+1"
}
BLOCKQUOTE {
	FONT-FAMILY: arial,helvetica,geneva,sans
}
P {
	FONT-FAMILY: arial,helvetica,geneva,sans
}
UL {
	FONT-FAMILY: arial,helvetica,geneva,sans
}
OL {
	FONT-FAMILY: arial,helvetica,geneva,sans
}
PRE {
	FONT-FAMILY: courier new,courier,fixed; size: "+1"; style: bold
}
TT {
	FONT-FAMILY: courier new,courier,fixed; size: "+1"; style: bold
}
ADDRESS {
	FONT-FAMILY: times,times new roman,serif; size: "-1"; style: italic
}
</STYLE>
</HEAD>
<BODY bgColor=#ffffff>
<H2 align=center><B><A 
href="http://www.onthenet.com.au/~grahamis/int2008/int2008.html">INT2008 Data 
Structures and Algorithms</A></B></H2>
<H2 align=center><B>Lecture 10 - Splay Trees &amp; B-Trees</B></H2>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <UL>
        <LI><B><A 
        href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#splaytrees">Splay 
        Trees</A></B> 
        <UL>
          <LI><B><A 
          href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#splayalgorithm">Splay 
          Tree Algorithm</A></B> </LI></UL>
        <LI><B><A 
        href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#multi">Multiway 
        Trees : B-Tree</A></B> 
        <UL>
          <LI><B><A 
          href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#external">External 
          information retrieval</A></B> 
          <LI><B><A 
          href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#insertion">Insertion 
          into a B-tree</A></B> 
          <LI><B><A 
          href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#deletion">Deletion 
          from a B-tree</A></B> 
          <LI><B><A 
          href="http://www.onthenet.com.au/~grahamis/int2008/week10/lect10.html#efficiency">Efficiency</A></B> 
          </LI></UL></LI></UL></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<BLOCKQUOTE>
  <H3><B>READING:</B></H3>
  <BLOCKQUOTE>
    <P>"Data Structures and Algorithm Analysis in C", M A Weiss – Chapter 4, 
    sections 5-7</P></BLOCKQUOTE>
  <P align=center>
  <HR>

  <P></P></BLOCKQUOTE>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3 align=center><A name=splaytrees></A>Splay Trees: A Self Adjusting Data 
      Structure</H3>
      <P>Splay trees are self-adjusting binary search trees. They represent an 
      attempt to combine the benefits of an AVL tree with a simple random binary 
      search tree.</P>
      <P>AVL trees are always balanced (according to the definition of an AVL 
      tree). However, this means continually keeping track of the height of the 
      sub-trees at each node. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Splay Tree Approach</H3>
      <P>A splay tree does <B><I>not</I></B> store height data; instead every 
      time we access a node, we move the accessed node to the root using AVL 
      rotations (insertions may also be rotated to the root).</P>
      <P>This may sound a bit crazy, but in practice it will result in a well 
      balanced tree with fast access times. Highly unbalanced trees can still be 
      formed from the insertions, but each access will tend to fix the problem. 
      </P>
      <P>Although the worst case retrieval is still <B><I><TT><FONT 
      size=+2>O</FONT></TT></I><TT>(n)</TT></B>, where n is the number of nodes 
      and the tree forms a list, a splay tree ensures that there cannot be a 
      <B><I>sequence</I></B> of <B><I><TT><FONT 
      size=+2>O</FONT></TT></I><TT>(n)</TT></B> retrievals. This happens because 
      moving a node to the root <B><I>splays</I></B> the tree and makes it more 
      balanced. In fact the average or <B><I>amortised</I></B> retrieval time 
      for a series of moves is <B><I><TT><FONT 
      size=+2>O</FONT></TT></I><TT>(lg&nbsp;n)</TT></B> 
</P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Benefits</H3>
      <P>Hence, <B><I>given a good splaying algorithm</I></B>, search times will 
      be fast. As there is no work in storing heights a splay tree can approach 
      (and sometimes improve on) an AVL tree.</P>
      <P>Also, nodes that are frequently accessed will be very near to the root. 
      This means for applications that frequently access the same nodes, search 
      times will be especially fast. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Main Question: How to Splay?</H3>
      <P>So what is a good splaying algorithm? The simplest approach is to 
      rotate an accessed node all the way to the root using single rotations. 
      The example on pages 124-125 in Weiss shows this. While this does improve 
      the situation for some nodes, others end up further away from the root 
      (e.g. k3 in Weiss). We can obtain a better overall tree shape if we use 
      double rotations as well. As with the AVL tree if the accessed node is the 
      inside node of its parent we use a double rotation, but if it is an 
      outside node we use a new strategy again involving two single rotations: 
      </P></TD></TR></TBODY></TABLE></CENTER>&nbsp;
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Terminology</B></P>
      <P>The two basic cases described above, in splay tree terminology are 
      called zig-zag and zig-zig respectively, ie when the accessed node is on 
      the inside it’s a zig-zag (or zag-zig) and when on the outside it’s a 
      zig-zig (or zag-zag). A zig is a left branch and a zag is a right branch 
      The diagrams following clarify this:</P>
      <P><B>Zig-Zag: </B></P>
      <P>X is our accessed node and we want to rotate it so that it becomes the 
      root of the tree (or sub-tree as the case may be). This is the same as a 
      left right double rotation in an AVL tree: 
</P></TD></TR></TBODY></TABLE></CENTER><IMG height=250 alt=Zig-Zag 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1001.gif" width=500 
align=bottom>
<P></P>
<P align=center><IMG height=80 alt=arrow 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1002.gif" width=20 
align=bottom></P>
<P align=center><IMG height=200 alt="zig-zag result" 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1003.gif" width=700 
align=bottom></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Zig-Zig:</B></P>
      <P>Again X is our accessed node and we want to rotate it to the root. 
      However, this is where the difference to ordinary rotation occurs. Instead 
      of rotating X and P and then X and G, we rotate P and G first, then X and 
      P: </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center><IMG height=220 alt="zig-zig 1" 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1004.gif" width=600 
align=bottom></P>
<P align=center><IMG height=80 alt=arrow 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1002.gif" width=20 
align=bottom></P>
<P align=center><IMG height=190 alt="zig-zig 2" 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1005.gif" width=640 
align=bottom></P>
<P align=center><IMG height=80 alt=arrow 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1002.gif" width=20 
align=bottom></P>
<P align=center><IMG height=240 alt="zig-zig 3" 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1006.gif" width=620 
align=bottom></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Example 1</H3>
      <P>
      <TABLE cellSpacing=0 cellPadding=6 border=0>
        <TBODY>
        <TR>
          <TD>
            <P>Splay at <B><TT>r1</TT></B> </P></TD>
          <TD>
            <P align=center><IMG height=220 alt="example 1_1" 
            src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1007.gif" 
            width=300 align=bottom> 
</P></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>path<B><TT> r3-r2-r1</TT></B> is <B>zig-zag</B> so perform double 
      rotation:</P>
      <P align=center><IMG height=180 alt="example 1_2" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1008.gif" 
      width=300 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>now we do<B> zig-zig</B> rotation (path <B><TT>r1-r4-r5</TT></B> is 
      zig-zig):</P>
      <P align=center><IMG height=180 alt="example 1_3" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1009.gif" 
      width=300 align=bottom></P>
      <P><B><TT>r1</TT></B> is now the root so the process is finished. 
  </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD colSpan=4>
      <H3>Example 2</H3></TD></TR>
  <TR>
    <TD>
      <P><B>Splay at c:</B> </P></TD>
    <TD>
      <P align=center><IMG height=290 alt="example 2_1" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1010.gif" 
      width=180 align=bottom> </P></TD>
    <TD>
      <P><B>zig-zig =&gt;</B> </P></TD>
    <TD>
      <P align=center><IMG height=290 alt="example 2_2" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1011.gif" 
      width=200 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>zig-zag =&gt;</B> </P></TD>
    <TD>
      <P align=center><IMG height=250 alt="example 2_3" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1012.gif" 
      width=200 align=bottom> </P></TD>
    <TD>
      <P><B>zig =&gt;</B> </P></TD>
    <TD>
      <P align=center><IMG height=235 alt="example 2_4" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1013.gif" 
      width=200 align=bottom> </P></TD></TR>
  <TR>
    <TD colSpan=4>
      <P align=center>Note the final move may a single <B>zig</B> or<B> zag</B> 
      to the root. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3><A name=splayalgorithm></A>Splay Tree Algorithm</H3>
      <P>Splay tree at node <B><TT>r</TT></B></P>
      <BLOCKQUOTE>
        <P><B><TT>p</TT></B> parent of <B><TT>r<BR>g</TT></B> grandparent of 
        <B><TT>r</TT></B></P><PRE><B>while (p not NULL)
   /* while p is not the root */
   if (g is NULL) 
      /* r is a child of the root node */
      if (r left of p) zig 
      else zag
   else if (g not NULL) 
      /* r has parent and grandparent */
      if (r left of p and p left of g)
         zig-zig 
      else if (r right of p and p right of g)
         zag-zag
      else if (r right of p and p left of g)
         zig-zag
      else
         zag-zig</B></PRE></BLOCKQUOTE></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Implementation</H3>
      <P>For splay trees to work we need to keep track of each node’s parent. 
      Hence we need an extra back pointer in our data structure:</P>
      <BLOCKQUOTE><PRE><B>typedef struct splay_node {   
   Item Value;
   struct splay_node *Left;
   struct splay_node *Right;
   struct splay_node *Parent;
} SplayNode;</B></PRE></BLOCKQUOTE>
      <P><I>See Kruse for a detailed splay tree implementation</I> 
  </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3 align=center><A name=multi></A>Multiway Trees : B-Tree </H3>
      <H3><A name=external></A>External information retrieval </H3>
      <P>B-trees are used in database systems where the tree is kept on a 
      physical disk instead of main memory. The data structures we have 
      considered so far are for internal information retrieval and are kept in 
      high-speed memory (RAM).</P>
      <P>Accessing (locating a record) on disk is very expensive process (time 
      required for a single access is thousands of times greater for disk than 
      for RAM). A B-tree takes advantage of the fact that we can read in many 
      records (a page or block at a time) to minimise the number of disk 
      accesses.</P>
      <P>Each block becomes a node in our B-tree. The more records we can fit 
      into a block the fewer disk accesses are required to find a record. In 
      practice a B-tree reads from an index file, which indexes a separate data 
      file.</P>
      <P>Each index record contains:</P>
      <UL>
        <LI>a key value from the data file 
        <LI>the disk address of the key value’s record in the data file 
        <LI>the disk address of the child node (or block) of the current index 
        record (this will be another block in the index file). 
  </LI></UL></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>If a complete data structure is in internal storage (e.g. as a binary 
      tree) then there is no advantage in fitting as many keys as possible in a 
      node because moving from one node to another is very fast. However when 
      the retrieval of a node requires a disk access (as in external storage) we 
      want to minimise the number of nodes retrieved. Hence we want to put as 
      many keys as possible in a node. Hence B-trees (and B+-trees).</P>
      <P>Because each node in a B-tree has several key values it has several 
      children (unlike a binary tree where every node has one key and two 
      children). Hence it is a multiway tree. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3><B>Properties of a B-tree</B></H3>
      <UL>
        <LI>The root is either a leaf or has between 2 and m children. 
        <LI>All non-leaf nodes (except the root) have between [m/2] and m 
        children. 
        <LI>All leaves are at the same depth. </LI></UL>
      <P>All data are stored at the leaves. Contained in each interior node are 
      pointers <B><TT>P1, P2, ..., Pm</TT></B> to the children, and values 
      <B><TT>k1, k2, ..., km</TT></B> representing the smallest value found in 
      the subtrees. Some of the pointers can, of course be NULL. 
  </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3>Order:</H3>
      <P>The order of a B-tree is the maximum number of links that may be 
      contained in a node.</P>
      <P>e.g. B-tree of order 4: </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center><IMG height=200 
src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1014.gif" width=600 
align=bottom></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3><A name=insertion></A>Insertion into a B-tree</H3>
      <P>A B-tree must (by definition) have all leaves at the same level. This 
      ensures the height of the tree is minimised and so fewer disk accesses are 
      required. However, this also means we cannot just add new leaves on the 
      bottom of the tree (as in a binary tree). Instead the tree must grow from 
      the root. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>1. Find the insertion point</B></P>
      <P>This is achieved by adding any new key to the appropriate leaf node 
      (this leaf is found in a similar manner to searching a binary tree as 
      every left sub-tree contains keys that are less than the parent key, and 
      every right sub-tree contains keys that are greater). Once the leaf is 
      found, the new key is added. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>2. Node Splitting</B></P>
      <P>If an insertion causes a leaf node to become over-full then it is split 
      and the internal node key value and pointers will need to be changed 
      appropriately. If the internal node then becomes full the process is 
      repeated (ie the parent node is split and the middle value migrates up). 
      This process can continue all the way to the root. If the root becomes 
      full, it is split and the tree gains another level.</P>
      <P>As all leaves remain on the same level the tree nodes are always 
      balanced.</P>
      <P>Consider the following example: </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=6 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Example:</B> Insert into a B-tree of order 5 the values</P>
      <P align=center><B><TT>a g f b k d h m j e s i r x</TT></B> </P>
      <P><B>Initially:</B> empty tree</P>
      <P><B>Step 1: </B>insert <B><TT>a g f b k</TT></B></P>
      <P align=center><IMG height=34 alt="example 3_1" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1015.gif" 
      width=134 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 2:</B> insert <B><TT>d</TT></B> - node full so split</P>
      <P align=center><IMG height=100 alt="example 3_2" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1016.gif" 
      width=320 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 3:</B> insert <B><TT>h m</TT></B></P>
      <P align=center><B><TT><IMG height=100 alt="example 3_3" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1017.gif" 
      width=320 align=bottom></TT></B> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 4:</B> insert <B><TT>j</TT></B> - <B><TT>fghkm</TT></B> is full 
      so split</P>
      <P align=center><IMG height=100 alt="example 3_4" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1018.gif" 
      width=460 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 5: </B>insert <B><TT>e s i r </TT></B></P>
      <P align=center><B><TT><IMG height=100 alt="example 3_5" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1019.gif" 
      width=460 align=bottom></TT></B> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 6:</B> insert <B><TT>x</TT></B> - <B><TT>jkmrs</TT></B> is full 
      so split</P>
      <P align=center><IMG height=100 alt="example 3_6" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1020.gif" 
      width=620 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3><A name=deletion></A>Deletion from a B-tree</H3>
      <P>As usual deletion poses a more interesting problem than insertion. 
      Instead of expanding the size of the tree at the root, deletion will 
      eventually cause the height of the tree to reduce. 
</P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 1: Find the key to be deleted</B></P>
      <P>First we find the key value to be deleted. If it is only in a leaf node 
      then it is simply removed. However, if it is also in an internal node we 
      use a similar method as in the AVL tree. We find the successor (or 
      predecessor) of the node to be deleted which <I>must</I> only be in a leaf 
      node. We then replace the deleted key value and record pointers with the 
      successor leaf key, and delete the original successor key value. 
  </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Step 2: What if the leaf node has too few keys?</B> </P>
      <P>Recall a B-tree node must have at least <B><TT>m/2</TT></B> key values 
      in all nodes except the root, where <B><TT>m</TT></B> is the order of the 
      tree (this again stops the height of the tree growing unnecessarily). If a 
      deletion causes a node to have too few keys there are two strategies: 
    </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Check the adjacent leaf nodes that belong to the same parent. If one of 
      these has spare keys we can move it’s smallest key (if to the right of our 
      delete node) or largest key (if to the left) to the 'delete' node so that 
      it now has enough keys.</P>
      <P>If taking from the left, that key becomes the new pointer to the 
      'delete' node in the parent.. If taking from the right, the key pointer to 
      the right node in the parent must be changed to what is now the lowest key 
      in that node. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>However, if all adjacent nodes also have too few keys we cannot use the 
      above strategy. Instead we can merge the delete node with one of the 
      adjacent nodes and the key value in the parent node that lies between 
      them. This key value is then removed from the parent.</P>
      <P>The process may continue if the parent node now has too few keys. We 
      just repeat the above steps - first we try to move an adjacent key, if 
      this is not possible then we merge nodes. This can continue to the root, 
      and if the root contains only one key the height of the tree will be 
      reduced. </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P><B>Example: B-tree of order 5</B></P>
      <P align=center><B><IMG height=150 alt="example 4_1" 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1021.gif" 
      width=620 align=bottom></B> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Delete <B><TT>h</TT></B>:</P>
      <P align=center><IMG height=60 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1022.gif" 
      width=130 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Delete <B><TT>r</TT></B>:</P>
      <P align=center><IMG height=150 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1023.gif" 
      width=620 align=bottom></P>
      <P>Need to promote <B><TT>s</TT></B> as low value:</P>
      <P align=center><IMG height=110 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1024.gif" 
      width=310 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Delete <B><TT>p</TT></B>: <B><TT>mn</TT></B> would now contain too few 
      nodes so pull <B><TT>t</TT></B> up, <B><TT>s</TT></B> down, and delete 
      <B><TT>p</TT></B></P>
      <P align=center><IMG height=110 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1025.gif" 
      width=310 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>The tree now has the following structure:</P>
      <P align=center><IMG height=150 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1026.gif" 
      width=620 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Now consider Delete <B><TT>t</TT></B>: first we must pull up 
      <B><TT>t</TT></B>’s successor <B><TT>u</TT></B>, and delete 
      <B><TT>t</TT></B> in the leaf:</P>
      <P align=center><IMG height=110 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1027.gif" 
      width=310 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>However, when <B><TT>t</TT></B> is deleted this causes 
      <B><TT>u</TT></B>’s leaf to have too few nodes. We cannot get another key 
      from the adjacent node because it too would have too few keys. Hence we 
      must merge the two leaf nodes, bringing down <B><TT>u</TT></B>:</P>
      <P align=center>&nbsp;<IMG height=150 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1028.gif" 
      width=620 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <P>Now the internal node with <B><TT>m</TT></B> has too few keys and 
      <B><TT>cf</TT></B> does not have a spare key. Hence we must merge the two 
      internal nodes and the root, giving the final tree:</P>
      <P align=center><IMG height=128 
      src="Lecture 10 - Splay Trees &amp; B-Trees_arquivos/image1029.gif" 
      width=512 align=bottom> </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<P align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="90%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H3><A name=efficiency></A>Efficiency</H3>
      <P>The depth of a B-tree is at most [<B><TT>log<SUB>(M/2)</SUB> 
      N</TT></B>] (i.e. when all nodes have the minimum <B><TT>M/2</TT></B> 
      keys). If we perform a binary search at each node to find which branch to 
      take then we perform <B><I><TT><FONT size=+2>O</FONT></TT></I><TT>(log 
      M)</TT></B> operations, but an Insert or Delete operation could require 
      <B><I><TT><FONT size=+2>O</FONT></TT></I><TT>(M)</TT></B>operations to fix 
      the worst possible scenario.</P>
      <P>So the worst possible case for an Insert or Delete operation is:</P>
      <P align=center><B><I><TT><FONT size=+2>O</FONT></TT></I><TT>(M 
      log<SUB>M</SUB> N) = </TT><I><TT><FONT 
      size=+2>O</FONT></TT></I><TT>((M/log M) log N)</TT></B></P>
      <P>But a find only takes:</P>
      <P align=center><B><I><TT><FONT size=+2>O</FONT></TT></I><TT>(log 
      N)</TT></B></P>
      <P>Empirically it has been found that <B><TT>M</TT></B> values of 3 or 4 
      are optimal. If we are only interested in in-memory access there is no 
      point in going to larger values.</P>
      <P>However, if we are accessing a B-tree on a disk, then if each node is 
      stored in a single disk block this favours larger <B><TT>M</TT></B> values 
      – the number of disk accesses is equal to the depth of the tree and is 
      therefore: </P>
      <P align=center><B><I><TT><FONT 
      size=+2>O</FONT></TT></I><TT>(log<SUB>M</SUB> N)</TT></B> </P>
      <P>The value of <B><TT>M</TT></B> can then be chosen to be the largest 
      value that can still allow an interior node to fit into one disk block: 
      often 32 &lt;= <B><TT>M</TT></B> &lt;= 256.</P>
      <P>In addition, if the higher levels of the B-tree are cached in memory, 
      this can further increase the performance of a disk tree search. 
  </P></TD></TR></TBODY></TABLE></CENTER>
<P></P>
<ADDRESS><FONT size=-1>
<HR>
</FONT></ADDRESS>
<ADDRESS><FONT color=#cc0000 size=-1>Copyright © Dr Ian G Graham, 2000. All 
rights reserved.</FONT><FONT size=-1><BR>For use only by students enrolled for 
the INT2008 Data Structures and a\Algorithms course at Griffith University, Gold 
Coast Campus. Not to be printed out or copied by any other persons or used for 
any other purpose without written permission of the 
author.</FONT></ADDRESS></BODY></HTML>
