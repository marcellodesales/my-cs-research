package br.ufal.bibliweb;
///////////////////////////////////////////////////////////
//
//  AcademicUser.java
//  Implementation of the Class AcademicUser
//  Generated by Enterprise Architect
//  Created on:      13-Apr-2002 13:44:13
//  Original author: Marcello Junior
//
///////////////////////////////////////////////////////////
//  Modification history:
///////////////////////////////////////////////////////////
import java.util.Vector;
import java.util.Hashtable;
import java.util.GregorianCalendar;
import java.sql.SQLException;
import java.sql.Date;

import br.ufal.bibliweb.exception.UserNotFoundException;
import br.ufal.bibliweb.exception.AcademicCourseNotFoundException;
import br.ufal.bibliweb.exception.UserAlreadyExistsException;
import br.ufal.bibliweb.exception.CPFIncorrectFormException;
import br.ufal.bibliweb.exception.ResourceNotFoundException;

import br.ufal.bibliweb.DatabaseLayer;

/**
 * Define os usuários acadêmicos existentes numa biblioteca acadêmica.
 * <ul>
 * 	<li>Professor;
 * 	<li>Aluno;
 * </ul>
 * Possuem todas características de um usuário abstrato, além dos comportamentos.
 *
 * @author 		Marcello de Sales
 */
public class AcademicUser extends AbstractUser{

	/** A matrícula do usuário acadêmico. */
	private String registration;
	/** A identificação do curso acadêmico no qual o usuário faz parte. */
	private String academicCourseID;
	
	/**
	 * @param ID 		A identificação do usuário acadêmico
	 * @param database  Conexão com banco de dados
	 */
	public AcademicUser(String ID, DatabaseLayer database) throws UserNotFoundException{
		super(ID,database.query("SELECT * FROM academic_user WHERE user_id='"+ID+"'"));
		this.database = database;
		this.registration     = (String)this.databaseState.get("registration");
		this.academicCourseID = (String)this.databaseState.get("academic_course_id");
	}
	
	/** @return A matrícula do usuário acadêmico. */
	public String getRegistration(){
		return this.registration;
	}
	
	/** @return Retorna a identificação do curso acadêmico que o usuário faz parte. */
	public String getAcademicCourseID(){
		return this.academicCourseID;
	}
	
	/**
	 * @return Retorna o AcademicCourse ao qual o usuário possui.
	 * @see AcademicCourse
 	 */
	public AcademicCourse getAcademicCourse(){
		AcademicCourse academicC = null;
		try {
			academicC = new AcademicCourse(this.academicCourseID,this.database);
		} catch (ResourceNotFoundException rnfe){
			rnfe.printStackTrace();
		}
		return academicC;
	}
	
	/** @return Verifica se um usuário acadêmico exite com a matrícula passada. */
	public static boolean registrationExists(DatabaseLayer database, String registration){
		Vector thisResult = database.query("SELECT registration FROM academic_user WHERE registration='"+registration+"'");
		return (thisResult.size() > 0);
	}
	
	/**
	 * Cria um novo usuário acadêmico.
	 * @return A identificação do novo usuário criado!
	 * @throws CPFIncorrectFormException
	 */
	public static String createNewAcademicUser(String groupID, String academicCourseID, String CPF, String registration, String name, String homeAddress, String workAddress, String homePhone, String workPhone, String cellPhone, String email, DatabaseLayer database)
		throws CPFIncorrectFormException, ResourceNotFoundException, UserAlreadyExistsException, AcademicCourseNotFoundException{
		
			CPF   = CPF.trim();
			email = email.trim();
			registration = registration.toUpperCase();
			
			//valida o CPF e levanta exceção caso esteja errado;
			if(CPF.length() != 11) {
				throw new CPFIncorrectFormException("O CPF é composto de 11 caracteres!");
			} else
				if ((Utility.isCPFValid(CPF)))
					if (!Group.exists(groupID,database))
						throw new ResourceNotFoundException("O grupo não existe com ID="+groupID);
					else
					if (AcademicUser.registrationExists(database,registration))
						throw new UserAlreadyExistsException("Usuário já existente com matrícula = "+registration,registration);
					else
					if (!AcademicCourse.exists(academicCourseID,database))
						throw new AcademicCourseNotFoundException("Curso acadêmico não encontrado ID = "+academicCourseID);
					else {
						return AcademicUser.createInDatabase(groupID,academicCourseID,CPF,registration,name,homeAddress,workAddress,homePhone,workPhone,cellPhone,email,database);
						//usuario pode criar sua conta online com o cpf e o ID
					}
				else throw new CPFIncorrectFormException("O número do CPF não é válido!");
	}
	
	/**
	 * Cria a instância de usuário no banco de dados.
	 * @return O identificador do novo usuário acadêmico. */
	private static String createInDatabase(String groupID, String academicCourseID,String CPF, String registration,String name, String homeAddress, String workAddress, String homePhone, String workPhone, String cellPhone, String email, DatabaseLayer database){
		String newUserID = "";
		try{ //Usuário impedido porque ainda nao possui imagem.
			newUserID = Utility.getNewOID();
			database.update("INSERT INTO academic_user (user_id,group_id,status_id,cpf,name,home_address,work_address,home_phone,work_phone,cell_phone,email,registration,academic_course_id) "+
								"VALUES ('"+newUserID+"','"+groupID+"','"+Status.USER_OBSTRUCTED+"','"+CPF+
								"','"+name+"','"+homeAddress+"','"+workAddress+"','"+homePhone+
								"','"+workPhone+"','"+cellPhone+"','"+email+"','"+registration+"','"+academicCourseID+"')");
		}catch(SQLException sqle){
			sqle.printStackTrace();
			Utility.log(Utility.ERROR_FILE_LOG,sqle);
		}
		return newUserID;
	}
}

